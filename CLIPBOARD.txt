E:\WORKSPACE\Projects\sql\use garp.sql

//git repo for benihime tutorial

https://github.com/teddysmithdev/RunGroop

//
using Microsoft.AspNetCore.Mvc;
using LinqToSqlWebApp.Models;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;

namespace LinqToSqlWebApp.Controllers
{
    public class PersonalInfoController : Controller
    {
        private readonly string _connectionString;

        public PersonalInfoController(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection");
        }

        public async Task<IActionResult> Index()
        {
            var personalInfos = new List<PersonalInfo>();

            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("SELECT * FROM PersonalInfos", connection);
                await connection.OpenAsync();
                var reader = await command.ExecuteReaderAsync();

                while (await reader.ReadAsync())
                {
                    var info = new PersonalInfo
                    {
                        Id = reader.GetInt32(0),
                        Name = reader.GetString(1),
                        Email = reader.GetString(2),
                        Phone = reader.GetString(3)
                    };

                    personalInfos.Add(info);
                }
            }

            return View(personalInfos);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(PersonalInfo personalInfo)
        {
            if (ModelState.IsValid)
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    var command = new SqlCommand(
                        "INSERT INTO PersonalInfos (Name, Email, Phone) VALUES (@Name, @Email, @Phone)", 
                        connection
                    );
                    
                    command.Parameters.AddWithValue("@Name", personalInfo.Name);
                    command.Parameters.AddWithValue("@Email", personalInfo.Email);
                    command.Parameters.AddWithValue("@Phone", personalInfo.Phone);

                    await connection.OpenAsync();
                    await command.ExecuteNonQueryAsync();
                }

                return RedirectToAction(nameof(Index));
            }
            return View(personalInfo);
        }
    }
}
 

Models.Info ii = new Models.Info();
 ii.Name = "Joyboy";
 ii.Phone = 81498798;
 ii.Email = "boseallen192@gmail.com";
 ii.Credit = "12739127836";
 ii.CheckIn = DateOnly.Parse("2024-12-25");
 ii.CheckOut = DateOnly.Parse("2025-5-14");
 ii.GuestNo = 5;
 ii.RoomType = "SUITE";
 return View(ii);


Filling Remaining Height Of A WebPage....

/* Ensure the body and html take up the full height */
html, body {
  height: 100%;
  margin: 0;
}

/* Container uses flex layout */
.container {
  display: flex;
  flex-direction: column;
  height: 100vh; /* Full viewport height */
}

/* Main content grows to fill available space */
.fill-height {
  flex: 1;
  background-color: lightblue; /* Just for visual reference */
}

header, footer {
  background-color: #ddd; /* Just for visual reference */
  padding: 10px;
}


changing intendation in Vim...
:set shiftwidth=n;

to create a core dump:- 
'allen@MAC:~/DOCS$ sudo su
[sudo] password for allen: 
root@MAC:/home/allen/DOCS# echo "./new_core" > /proc/sys/kernel/core_pattern
root@MAC:/home/allen/DOCS# cat /proc/sys/kernel/core_pattern


after creating core dump:-
ulimit -c unlimited
cat /proc/sys/kernel/core_pattern
gdb ./kira ./new_core

inside GDB :-
next lay
break main
run
next
nexti
ref

x/i $pc
info registers

App777 under review

<Dependencies>
    <PackageDependency Name="Microsoft.VCLibs.140.00.UWPDesktop" MinVersion="14.0.24217.0" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" />
</Dependencies>

Visual Studio v17.11.5

windows dialog app c++,windows desktop app c++ .
C# blazor,razor,maybe MVC,desktop,forms,wpf .
java gradle android 10 mobile apps .
need javascript sdk for javascript apps in VS .

VISUAL STUDIO FAILED PROJECTS :-

App 1,App 6,App 77,App 99,App 44,reactApp,C++ desktopApps with ui of any kind and direct x c++ apps they all need Microsoft.VCLibs.14.0 or 140 .


const date1 = new Date('2023-09-30');
const date2 = new Date('2024-09-30');

const difference = (date2 - date1) / (1000 * 60 * 60 * 24);  // Convert milliseconds to days
console.log(difference);  // Output: 366 (leap year)



garp: garp.c
		$(C$(CC) garp.c -o garp -Wall -Wextra -pedantic -std=c99C) garp.c -o garp -Wall -Wextra -pedantic -std=c99





SQLwwww
use zoro;
desc employee;
create table department(dno int,dname varchar(10),hod varchar(10),location char(10),strength int);
desc department;
create table student(regno int,name char(10),email char(10),phone int,branch varchar(10),tutor int,place varchar(10),cgpa decimal(4,2));
desc student;
insert into department values(303,'CJ','hera','CHE',200);
insert into employee values(203,'hebi',20000,'broker','EKM',6317984,303);
select * from student;
select * from department;
select * from employee;
alter table employee modify salary int;

//quicksort(lomuto partition)
#include <stdio.h>
void swap(int *a,int *b);
int partition(int a[],int l,int p);
void quicksort(int z[],int l,int p);
int display(int z[],int e);
void main()
{
    int a[10]={6,10,3,8,2},s=5;
    quicksort(a,0,s-1);
    display(a,s-1);
}
void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int partition(int a[],int l,int p)
{
    for(l;l<p;l++)
    {
        while(a[l]>a[p])
        {
            swap(&a[l],&a[p-1]);
            if(a[p-1]>a[p])
            {
                swap(&a[p-1],&a[p]);
            }
            p--;
        }
    }
    return p;
}
int display(int z[],int e)
{
    int i=0;
    while(i<=e)
    {
        printf("%d\t",*(z+i));
        i++;
    }
}
void quicksort(int z[],int l,int p)
{
    int pi=partition(z,l,p);
    if(l>p) return ;
    quicksort(z,l,pi-1);
    quicksort(z,pi+1,p);
}
