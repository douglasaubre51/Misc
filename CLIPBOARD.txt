Seminar topic - SvelteJS :

Svelte.js is a modern JavaScript framework that is quickly gaining popularity among developers. Unlike other frameworks such as React or Angular, Svelte does not use a virtual DOM, which results in a faster and more efficient performance. Svelte’s approach to building web applications is unique and allows developers to write efficient and concise code. One of the main benefits of Svelte is its small size and low overhead. Unlike other frameworks, Svelte does not require additional libraries or dependencies, making it easy to set up and get started with. Furthermore, Svelte’s approach to building web applications eliminates the need for complex build tools and configurations, making it a great choice for developers of all skill levels. Svelte also offers a more intuitive and straightforward way to build web applications. Instead of using a complex set of APIs, Svelte’s syntax is easy to understand and follow, making it a great choice for developers who are new to web development.


box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;

box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;

box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;

box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;

https://github.com/douglasaubre51/maki


import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class SignalingServer extends TextWebSocketHandler {

    private final Map<String, WebSocketSession> sessions = new ConcurrentHashMap<>();
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        // Add new WebSocket session
        String sessionId = session.getId();
        sessions.put(sessionId, session);
        System.out.println("New connection: " + sessionId);
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, org.springframework.web.socket.TextMessage message) throws Exception {
        // Handle incoming signaling messages (SDP or ICE candidates)
        String payload = message.getPayload();
        Map<String, Object> data = objectMapper.readValue(payload, Map.class);

        String targetSessionId = (String) data.get("target");
        WebSocketSession targetSession = sessions.get(targetSessionId);

        if (targetSession != null && targetSession.isOpen()) {
            targetSession.sendMessage(new org.springframework.web.socket.TextMessage(payload));
        }
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, org.springframework.web.socket.CloseStatus status) {
        // Remove WebSocket session
        sessions.remove(session.getId());
        System.out.println("Connection closed: " + session.getId());
    }
}
Configuration
Register the WebSocket endpoint in Spring Boot:

java
import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(new SignalingServer(), "/signaling").setAllowedOrigins("*");
    }
}
2. Java WebRTC Client
The client uses the signaling server for exchanging SDP and ICE candidates.

Example Client Code
java
import dev.onvoid.webrtc.*;
import dev.onvoid.webrtc.media.audio.AudioDeviceModule;
import dev.onvoid.webrtc.media.video.VideoDeviceModule;
import java.net.URI;
import java.util.Map;

public class WebRTCClient {

    private PeerConnection peerConnection;
    private WebSocketClient signalingClient;

    public WebRTCClient(String signalingUrl) throws Exception {
        // Connect to signaling server
        signalingClient = new WebSocketClient(new URI(signalingUrl)) {
            @Override
            public void onMessage(String message) {
                handleSignalingMessage(message);
            }
        };
        signalingClient.connect();

        // Create PeerConnectionFactory
        PeerConnectionFactory factory = new PeerConnectionFactory();
        AudioDeviceModule audioModule = new AudioDeviceModule();
        VideoDeviceModule videoModule = new VideoDeviceModule();
        factory.setAudioDeviceModule(audioModule);
        factory.setVideoDeviceModule(videoModule);

        // Configure PeerConnection
        RTCConfiguration config = new RTCConfiguration();
        config.iceServers.add(new RTCIceServer("stun:stun.l.google.com:19302"));
        peerConnection = factory.createPeerConnection(config, new PeerConnectionObserver() {
            @Override
            public void onIceCandidate(IceCandidate candidate) {
                sendSignalingMessage(Map.of(
                    "type", "iceCandidate",
                    "candidate", candidate.sdp,
                    "sdpMid", candidate.sdpMid,
                    "sdpMLineIndex", candidate.sdpMLineIndex
                ));
            }
        });

        // Create Offer SDP
        peerConnection.createOffer(new SDPObserver() {
            @Override
            public void onSuccess(SessionDescription sdp) {
                peerConnection.setLocalDescription(new SDPObserver() {
                    @Override
                    public void onSuccess() {
                        System.out.println("Local SDP Set Successfully");
                    }
                }, sdp);

                sendSignalingMessage(Map.of("type", "offer", "sdp", sdp.sdp));
            }
        });
    }

    private void sendSignalingMessage(Map<String, Object> message) {
        signalingClient.sendMessage(new ObjectMapper().writeValueAsString(message));
    }

    private void handleSignalingMessage(String message) throws Exception {
        Map<String, Object> data = new ObjectMapper().readValue(message, Map.class);
        String type = (String) data.get("type");

        if ("answer".equals(type)) {
            SessionDescription remoteSdp = new SessionDescription(SessionDescriptionType.ANSWER, (String) data.get("sdp"));
            peerConnection.setRemoteDescription(new SDPObserver() {
                @Override
                public void onSuccess() {
                    System.out.println("Remote SDP Set Successfully");
                }
            }, remoteSdp);
        } else if ("iceCandidate".equals(type)) {
            IceCandidate candidate = new IceCandidate(
                (String) data.get("sdpMid"),
                (int) data.get("sdpMLineIndex"),
                (String) data.get("candidate")
            );
            peerConnection.addIceCandidate(candidate);
        }
    }

    public static void main(String[] args) throws Exception {
        new WebRTCClient("ws://localhost:8080/signaling");
    }
}
How It Works
Spring Boot WebSocket Signaling Server:

Acts as a relay for SDP and ICE candidate exchange between peers.

Java WebRTC Client:

Connects to the signaling server using WebSocket.

Creates SDP offers and ICE candidates.

Adds remote SDP and ICE candidates received from the signaling server.

Would you like me to elaborate on specific parts (e.g., setting up the WebSocket client or testing the signaling process)? Just let me know3





how to send videostreams and audio streams on this
To send video and audio streams in a WebRTC application using Java, you need to work with WebRTC's media track and stream APIs. Here’s how to integrate audio and video streams into your setup using the webrtc-java library:

1. Media Stream Basics
In WebRTC:

A MediaStream is a collection of media tracks (audio and/or video).

Tracks can be added to a PeerConnection and shared between peers.

The local stream contains tracks you capture (e.g., camera/microphone).

The remote stream contains tracks received from the other peer.

2. Capturing Audio and Video
You can capture audio and video using modules provided by the webrtc-java library, or use your custom sources for media.

Example:
java
import dev.onvoid.webrtc.media.audio.*;
import dev.onvoid.webrtc.media.video.*;

public MediaStream captureMedia(PeerConnectionFactory factory) {
    // Create MediaStream
    MediaStream mediaStream = factory.createLocalMediaStream("localStream");

    // Capture Audio
    AudioDeviceModule audioDevice = new AudioDeviceModule();
    AudioTrack audioTrack = factory.createAudioTrack("audioTrack", audioDevice.createAudioSource());
    mediaStream.addTrack(audioTrack);

    // Capture Video
    VideoDeviceModule videoDevice = new VideoDeviceModule();
    VideoSource videoSource = videoDevice.createVideoSource();
    VideoTrack videoTrack = factory.createVideoTrack("videoTrack", videoSource);
    mediaStream.addTrack(videoTrack);

    System.out.println("Audio and Video tracks added to the local MediaStream.");
    return mediaStream;
}
3. Adding Local Media Stream to PeerConnection
You can attach the MediaStream (captured above) to your PeerConnection for sharing with the remote peer.

Example:
java
public void addLocalStreamToPeerConnection(PeerConnection peerConnection, MediaStream localStream) {
    peerConnection.addStream(localStream);
    System.out.println("Local MediaStream added to PeerConnection.");
}
4. Handling Remote Media Stream
The remote peer’s media stream is received via WebRTC events. You can listen for remote tracks and play them using an appropriate media player.

Example:
java
peerConnection.addTrack(new MediaStreamTrackObserver() {
    @Override
    public void onAddTrack(MediaStreamTrack track) {
        System.out.println("Remote track added: " + track.kind());

        if (track.kind().equals(MediaStreamTrackKind.VIDEO)) {
            // Handle incoming video (e.g., render it on the UI)
        } else if (track.kind().equals(MediaStreamTrackKind.AUDIO)) {
            // Handle incoming audio (e.g., play it on speakers)
        }
    }
});
5. Signaling
Ensure the signaling server exchanges SDP and ICE candidates between peers. When the peer connection is established, the media streams will flow automatically.

Full Code Workflow
Here’s how it all ties together:

Capture Local Media: Use AudioDeviceModule and VideoDeviceModule to create media sources.

Add Media to PeerConnection: Attach the local media stream to your PeerConnection.

Signal SDP and ICE Candidates: Exchange SDP/ICE using your Spring Boot WebSocket signaling server.

Play Remote Media: Receive remote tracks and handle them.

This approach ensures both audio and video streams are successfully transmitted between peers. Let me know if you'd like me to expand on any part! 🚀



web rtc on java---------------------------------------------------------
	
import dev.onvoid.webrtc.*;
import dev.onvoid.webrtc.media.audio.AudioDeviceModule;
import dev.onvoid.webrtc.media.audio.JavaAudioDeviceModule;
import dev.onvoid.webrtc.media.video.VideoCapturer;
import dev.onvoid.webrtc.media.video.VideoDeviceSource;
import dev.onvoid.webrtc.media.video.VideoTrack;

import javax.websocket.*;
import java.net.URI;
import java.nio.ByteBuffer;

public class WebRTCClient {

    private PeerConnectionFactory factory;
    private PeerConnection peerConnection;
    private SignalingClient signalingClient;

    public WebRTCClient() {
        // Initialize WebRTC components
        PeerConnectionFactory.initialize(PeerConnectionFactory.InitializationOptions.builder().createInitializationOptions());
        AudioDeviceModule audioDeviceModule = new JavaAudioDeviceModule();
        factory = new PeerConnectionFactory(null, audioDeviceModule, null);
        signalingClient = new SignalingClient(this);
    }

    public void startCall() throws Exception {
        // Connect to the signaling server
        signalingClient.connect("ws://localhost:8080/signal");

        // Set up media stream
        MediaStream mediaStream = factory.createLocalMediaStream("mediaStream");

        // Set up video
        VideoCapturer videoCapturer = VideoCapturer.create("default");
        VideoDeviceSource videoSource = new VideoDeviceSource(videoCapturer);
        VideoTrack videoTrack = factory.createVideoTrack("videoTrack", videoSource);
        mediaStream.addTrack(videoTrack);

        // Set up audio
        AudioTrack audioTrack = factory.createAudioTrack("audioTrack", factory.createAudioSource(new MediaConstraints()));
        mediaStream.addTrack(audioTrack);

        // Configure peer connection
        PeerConnection.RTCConfiguration rtcConfig = new PeerConnection.RTCConfiguration();
        peerConnection = factory.createPeerConnection(rtcConfig, new PeerConnectionObserver());

        // Add media stream to peer connection
        peerConnection.addStream(mediaStream);

        // Create offer
        peerConnection.createOffer(new SdpObserver() {
            @Override
            public void onCreateSuccess(SessionDescription sessionDescription) {
                peerConnection.setLocalDescription(this, sessionDescription);
                signalingClient.sendMessage(sessionDescription);
            }

            @Override
            public void onSetSuccess() {}

            @Override
            public void onCreateFailure(String s) {}

            @Override
            public void onSetFailure(String s) {}
        }, new MediaConstraints());
    }

    public void handleSignalingMessage(String message) {
        // Parse the incoming message
        // This is a simplified example; in a real application, you'd parse JSON or another structured format
        if (message.startsWith("offer") || message.startsWith("answer")) {
            SessionDescription.Type type = message.startsWith("offer") ? SessionDescription.Type.OFFER : SessionDescription.Type.ANSWER;
            String sdp = message.substring(message.indexOf("\n") +
::contentReference[oaicite:20]{index=20}

E:\WORKSPACE\Projects\sql\use garp.sql

//git repo for benihime tutorial

https://github.com/teddysmithdev/RunGroop

//
using Microsoft.AspNetCore.Mvc;
using LinqToSqlWebApp.Models;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;

namespace LinqToSqlWebApp.Controllers
{
    public class PersonalInfoController : Controller
    {
        private readonly string _connectionString;

        public PersonalInfoController(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection");
        }

        public async Task<IActionResult> Index()
        {
            var personalInfos = new List<PersonalInfo>();

            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("SELECT * FROM PersonalInfos", connection);
                await connection.OpenAsync();
                var reader = await command.ExecuteReaderAsync();

                while (await reader.ReadAsync())
                {
                    var info = new PersonalInfo
                    {
                        Id = reader.GetInt32(0),
                        Name = reader.GetString(1),
                        Email = reader.GetString(2),
                        Phone = reader.GetString(3)
                    };

                    personalInfos.Add(info);
                }
            }

            return View(personalInfos);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(PersonalInfo personalInfo)
        {
            if (ModelState.IsValid)
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    var command = new SqlCommand(
                        "INSERT INTO PersonalInfos (Name, Email, Phone) VALUES (@Name, @Email, @Phone)", 
                        connection
                    );
                    
                    command.Parameters.AddWithValue("@Name", personalInfo.Name);
                    command.Parameters.AddWithValue("@Email", personalInfo.Email);
                    command.Parameters.AddWithValue("@Phone", personalInfo.Phone);

                    await connection.OpenAsync();
                    await command.ExecuteNonQueryAsync();
                }

                return RedirectToAction(nameof(Index));
            }
            return View(personalInfo);
        }
    }
}
 

Models.Info ii = new Models.Info();
 ii.Name = "Joyboy";
 ii.Phone = 81498798;
 ii.Email = "boseallen192@gmail.com";
 ii.Credit = "12739127836";
 ii.CheckIn = DateOnly.Parse("2024-12-25");
 ii.CheckOut = DateOnly.Parse("2025-5-14");
 ii.GuestNo = 5;
 ii.RoomType = "SUITE";
 return View(ii);


Filling Remaining Height Of A WebPage....

/* Ensure the body and html take up the full height */
html, body {
  height: 100%;
  margin: 0;
}

/* Container uses flex layout */
.container {
  display: flex;
  flex-direction: column;
  height: 100vh; /* Full viewport height */
}

/* Main content grows to fill available space */
.fill-height {
  flex: 1;
  background-color: lightblue; /* Just for visual reference */
}

header, footer {
  background-color: #ddd; /* Just for visual reference */
  padding: 10px;
}


changing intendation in Vim...
:set shiftwidth=n;

to create a core dump:- 
'allen@MAC:~/DOCS$ sudo su
[sudo] password for allen: 
root@MAC:/home/allen/DOCS# echo "./new_core" > /proc/sys/kernel/core_pattern
root@MAC:/home/allen/DOCS# cat /proc/sys/kernel/core_pattern


after creating core dump:-
ulimit -c unlimited
cat /proc/sys/kernel/core_pattern
gdb ./kira ./new_core

inside GDB :-
next lay
break main
run
next
nexti
ref

x/i $pc
info registers

App777 under review

<Dependencies>
    <PackageDependency Name="Microsoft.VCLibs.140.00.UWPDesktop" MinVersion="14.0.24217.0" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" />
</Dependencies>

Visual Studio v17.11.5

windows dialog app c++,windows desktop app c++ .
C# blazor,razor,maybe MVC,desktop,forms,wpf .
java gradle android 10 mobile apps .
need javascript sdk for javascript apps in VS .

VISUAL STUDIO FAILED PROJECTS :-

App 1,App 6,App 77,App 99,App 44,reactApp,C++ desktopApps with ui of any kind and direct x c++ apps they all need Microsoft.VCLibs.14.0 or 140 .


const date1 = new Date('2023-09-30');
const date2 = new Date('2024-09-30');

const difference = (date2 - date1) / (1000 * 60 * 60 * 24);  // Convert milliseconds to days
console.log(difference);  // Output: 366 (leap year)



garp: garp.c
		$(C$(CC) garp.c -o garp -Wall -Wextra -pedantic -std=c99C) garp.c -o garp -Wall -Wextra -pedantic -std=c99





SQLwwww
use zoro;
desc employee;
create table department(dno int,dname varchar(10),hod varchar(10),location char(10),strength int);
desc department;
create table student(regno int,name char(10),email char(10),phone int,branch varchar(10),tutor int,place varchar(10),cgpa decimal(4,2));
desc student;
insert into department values(303,'CJ','hera','CHE',200);
insert into employee values(203,'hebi',20000,'broker','EKM',6317984,303);
select * from student;
select * from department;
select * from employee;
alter table employee modify salary int;

//quicksort(lomuto partition)
#include <stdio.h>
void swap(int *a,int *b);
int partition(int a[],int l,int p);
void quicksort(int z[],int l,int p);
int display(int z[],int e);
void main()
{
    int a[10]={6,10,3,8,2},s=5;
    quicksort(a,0,s-1);
    display(a,s-1);
}
void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int partition(int a[],int l,int p)
{
    for(l;l<p;l++)
    {
        while(a[l]>a[p])
        {
            swap(&a[l],&a[p-1]);
            if(a[p-1]>a[p])
            {
                swap(&a[p-1],&a[p]);
            }
            p--;
        }
    }
    return p;
}
int display(int z[],int e)
{
    int i=0;
    while(i<=e)
    {
        printf("%d\t",*(z+i));
        i++;
    }
}
void quicksort(int z[],int l,int p)
{
    int pi=partition(z,l,p);
    if(l>p) return ;
    quicksort(z,l,pi-1);
    quicksort(z,pi+1,p);
}
